# Generated by Django 3.1 on 2020-08-22 14:08

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('paypalEmail', models.EmailField(help_text='E-mail that is connected to your PayPal account', max_length=100, unique=True, verbose_name='Paypal Email')),
                ('invitesOpen', models.BooleanField(default=True, help_text='Leave this field checked if you are interested in being invited to events.', verbose_name='Allow Invites for Events')),
                ('inquiriesOpen', models.BooleanField(default=True, help_text='Leave this field checked if you are interested in being contacted by users through your profile.  If unchecked, users will only be able to contact you after you accept their offer or bid or you contact them.', verbose_name='Allow Users to Contact You Through Profile')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, default='None', help_text='A biography for your profile so others can know you better.', max_length=1000, verbose_name='Biography')),
                ('name', models.TextField(default='None', max_length=50, verbose_name='Full Name')),
                ('country', models.TextField(default='None', max_length=50)),
                ('state', models.TextField(default='None', max_length=50)),
                ('city', models.TextField(default='None', max_length=50)),
                ('zipCode', models.TextField(default='None', max_length=10, verbose_name='Zip Code')),
                ('delivery', models.BooleanField(default=False, help_text='Check this if you are able to deliver items.')),
                ('deliveryAddress', models.TextField(default='None', help_text='Submit an delivery address that you pick up items from.', max_length=100, verbose_name='Delivery Address')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='listings.user')),
                ('superAdmin', models.BooleanField(default=False, help_text='Admin that is able to set, remove and configure other Admin accounts.', verbose_name='Super Admin')),
                ('handleListings', models.BooleanField(default=False, help_text='Admin is able to manage user listings.', verbose_name='Can Handle Listings')),
                ('handleEvents', models.BooleanField(default=False, help_text='Admin is able to manage user events.', verbose_name='Can Handle Events')),
                ('handleWishlists', models.BooleanField(default=False, help_text='Admin is able to manage user wishlists.', verbose_name='Can Handle Wishlists')),
                ('handleImages', models.BooleanField(default=False, help_text='Admin is able to manage user images.', verbose_name='Can Handle Images')),
                ('handleRatings', models.BooleanField(default=False, help_text='Admin is able to manage user ratings.', verbose_name='Can Handle Ratings')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('listings.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ratingValue', models.IntegerField(default=1, help_text='Rating for user from 1 to 5, 5 being the best.', verbose_name='Rating')),
                ('feedback', models.TextField(help_text="Leave feedback for the user you're rating.", max_length=500)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='listings.profile')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='reviewer', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(default='None', max_length=500)),
                ('dateSent', models.DateTimeField(auto_now_add=True, verbose_name='Date Sent')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.TextField(help_text='Topic of the Conversation', max_length=100)),
                ('unread', models.BooleanField(default=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipient', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sender', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Warning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('warningCount', models.IntegerField(verbose_name='Warning Count')),
                ('reason', models.TextField(help_text='Submit reasoning for why you warned this user.', max_length=250, verbose_name='Reason for Warning')),
                ('actionsTaken', models.TextField(help_text='What actions were made regarding this user?', max_length=500, verbose_name='Actions Taken')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='admin', to='listings.admin')),
            ],
        ),
    ]
